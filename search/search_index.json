{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"LMS Community","text":"<p>Logitech Media Server is a fully open source server software to power a wide range of audio players. With the help of many plugins, Logitech Media Server can stream not only your local music collection, but content from many music services and internet radio stations to your players.</p> <p>Also your plugins can have their home on LMS-Community. If you want to host your plugin repository here, please contact ...</p>"},{"location":"#lms-ecosystem","title":"LMS Ecosystem","text":"<p>Although Squeezeboxes started in 2000 with hard- and software developed by Slim Devices, which became later Logitech, nowadays a wide array of hardware and software solutions exist which make up the LMS ecosystem.</p> <p>To get a functioning LMS system you need to have three components, namely (1) a server, (2) a controller and (3) one or more music players. These three components can also be supplied by one device, for instance a Raspberry Pi with a touch screen running piCorePlayer.</p> <p></p> Server Player Controller Logitech Media Server yes Squeezebox Touch optional yes yes Material Skin yes iPeng (iOS app) optional yes"},{"location":"getting-started-with-LMS/","title":"Getting Started","text":"<p>Logitech Media Server is a fully open source server software to power a wide range of audio players. With the help of many plugins, Logitech Media Server can stream not only your local music collection, but content from many music services and internet radio stations to your players.</p>"},{"location":"getting-started-with-LMS/#install","title":"Install","text":"<p>There are a couple of ways to get started with a server:</p> <ul> <li>Install using Docker</li> <li>Install using docker-compose</li> <li>Install on Linux</li> <li>Install on Windows</li> <li>Install on MacOS</li> </ul>"},{"location":"getting-started-with-LMS/#install-using-docker","title":"Install using Docker","text":"<p>Run:</p> <pre><code>docker run -it \\\n      -v \"&lt;somewhere&gt;\":\"/config\":rw \\\n      -v \"&lt;somewhere&gt;\":\"/music\":ro \\\n      -v \"&lt;somewhere&gt;\":\"/playlist\":rw \\\n      -v \"/etc/localtime\":\"/etc/localtime\":ro \\\n      -v \"/etc/timezone\":\"/etc/timezone\":ro \\\n      -p 9000:9000/tcp \\\n      -p 9090:9090/tcp \\\n      -p 3483:3483/tcp \\\n      -p 3483:3483/udp \\\n      lmscommunity/logitechmediaserver\n</code></pre> <p>Please note that the http port always has to be a 1:1 mapping. You can't just map it like -p 9002:9000, as Logitech Media Server is telling players on which port to connect. Therefore if you have to use a different http port for LMS (other than 9000) you'll have to set the HTTP_PORT environment variable, too:</p> <pre><code>docker run -it \\\n      -v \"&lt;somewhere&gt;\":\"/config\":rw \\\n      -v \"&lt;somewhere&gt;\":\"/music\":ro \\\n      -v \"&lt;somewhere&gt;\":\"/playlist\":rw \\\n      -v \"/etc/localtime\":\"/etc/localtime\":ro \\\n      -v \"/etc/timezone\":\"/etc/timezone\":ro \\\n      -p 9002:9002/tcp \\\n      -p 9090:9090/tcp \\\n      -p 3483:3483/tcp \\\n      -p 3483:3483/udp \\\n      -e HTTP_PORT=9002 \\\n      lmscommunity/logitechmediaserver\n</code></pre>"},{"location":"getting-started-with-LMS/#install-using-docker-compose","title":"Install using docker-compose","text":"<pre><code>version: '3'\nservices:\n  lms:\n    container_name: lms\n    image: lmscommunity/logitechmediaserver\n    volumes:\n      - /&lt;somewhere&gt;:/config:rw\n      - /&lt;somewhere&gt;:/music:ro\n      - /&lt;somewhere&gt;:/playlist:rw\n      - /etc/localtime:/etc/localtime:ro\n      - /etc/timezone:/etc/timezone:ro\n    ports:\n      - 9000:9000/tcp\n      - 9090:9090/tcp\n      - 3483:3483/tcp\n      - 3483:3483/udp\n    restart: always\n</code></pre>"},{"location":"getting-started-with-LMS/#install-on-linux","title":"Install on Linux","text":"<p>Go to https://lms-community.github.io/lms-server-repository/ and download the correct installer for your OS. Subsequently install the package with:</p> DebianRedHat <pre><code>sudo dpkg -i logitechmediaserver_8.3.1_amd64.deb\n</code></pre> <pre><code>sudo rpm -i logitechmediaserver-8.3.1-1.noarch.rpm\n</code></pre>"},{"location":"getting-started-with-LMS/#install-on-windows","title":"Install on Windows","text":""},{"location":"getting-started-with-LMS/#install-on-macos","title":"Install on macOS","text":""},{"location":"players-and-controllers/","title":"Players & Controllers","text":""},{"location":"players-and-controllers/#hardware-based","title":"Hardware based","text":"<p>Between 2001 and 2010 Logitech (and its predecessor Slim Devices) released a series of network music players. The lineup consisted of the Squeezebox Classic, an all-in-one Squeezebox Boom, the dual unit Squeezebox Duet, the audiophile grade Transporter, the small and optionally battery powered Squeezebox Radio, and the newest of the bunch, the Squeezebox Touch.</p> <p>Additionally, the Squeezebox Controller provides unparalleled control of all your players via an attractive full color display. The Controller and Receiver are sold together as the Squeezebox Duet package. </p> <ul> <li>Hardware comparison</li> <li>Squeezebox Touch</li> <li>Squeezebox Radio</li> <li>Squeezebox Boom</li> <li>Squeezebox Duet<ul> <li>Squeezebox Controller</li> <li>Squeezebox Receiver </li> </ul> </li> <li>Transporter </li> <li>Squeezebox 3rd Generation</li> <li>Squeezebox2</li> <li>Squeezebox, SB1</li> <li>SLIMP3</li> </ul> <p>After 2010 the LMS community developed a couple of hardware offerings. </p> <ul> <li>SqueezeAMP</li> <li>Squeezelite-ESP32</li> </ul> <p>And a couple of vendors added Squeezebox-compatibility in their commercial offerings:</p> <ul> <li>Sonicorbiter SE</li> <li>SOtM sMS-200</li> <li>microRendu</li> <li>Bryston BDP Pi</li> <li>Musical Fidelity M6 Encore</li> </ul>"},{"location":"players-and-controllers/#software-based","title":"Software based","text":"<ul> <li>Squeezelite</li> <li>piCorePlayer</li> <li>Daphile</li> <li>Max2Play</li> <li>iPeng (controller for iOS)</li> </ul>"},{"location":"players-and-controllers/hardware-comparison/","title":"Hardware comparison","text":"SLIMP3 Squeezebox Squeezebox2 Squeezebox v3/Squeezebox Classic Transporter Squeezebox Receiver Squeezebox Controller Squeezebox Boom Squeezebox Radio Squeezebox Touch Nickname SLIMP3 SB1 SB2 SB3 TP or TR SBR SBC SBB or Boom SB Radio or Radio SB Touch or Touch Released August 2001 November 2003 April 2005 November 2005 July 2006 March 2008 March 2008 August 2008 September 2009 April 2010 MSRP at Launch $249 $299 $299 $249 $1999 $149 ($399 with Controller as Duet) $299 ($399 with receiver as Duet) $299 $199 $299 Dimensions 8.5\"W x 2.5\"H x 2\"D 8.5\"W x 1.9\"H x 4.5\"D (216mm x 48mm x 117mm) Same as Squeezebox 7.6\"W x 3.7\"H x 3.1\"D (192mm x 93mm x 80mm) including stand 17\"W x 3\"H x 12.25\"D (433mm x 72mm x 311mm), optional rack mount kit L: 156mm x W: 106mm (w/o connectors); 112.5mm (w/connectors) x H: 29.25mm L: 156.2mm x W: 50.8mm x H: 18.8mm L: 79mm x W: 330mm x H: 127mm L: 90mm X W: 220mm X H: 130mm L: 80mm X W: 150mm X H: 100mm including stand Display Noritake 40x2 character VFD Original SB1: Noritake 40x2 character VFD, later upgraded as SBG: 280x16 pixels VFD, bitmapped graphics, multiple fonts, animation and images brightness control 320x32 pixel VFD, greyscale, bitmapped graphics, multiple fonts, animation, and images Same as Squeezebox2, except color is aqua-blue rather than green. (The display itself is green, but while Squeezebox2 uses a gray lens, the Squeezebox v3 lens is slightly purple, resulting in an aqua color.) Dual 320x32 displays, aqua color None 2.4\" color LCD, 16bpp, 240x320 portrait 160x32 pixel VFD, greyscale, bitmapped graphics, multiple fonts, animation, and images 2.4\" color LCD, 16bpp, 240x320 landscape 4.3\" color LCD capacitive touchscreen, 24bpp, 480x272 landscape CPU Microchip PIC16F877 microcontroller Ubicom IP2K series, 120 MHz Ubicom IP3K series, 250 MHz Same as Squeezebox2 IP3K at 325 MHz Same as Squeezebox2 Samsung S3C2412 200 MHz ARM926EJ Same as Squeezebox2 Freescale i.MX25 400 MHz ARM926EJ Freescale i.MX35 533 MHz ARM11 Ethernet Crystal CS8900A 10Mbps embedded Ethernet chip 10Mbps ethernet interface, RJ-45 twisted pair. Connects to any 10Mbps, 10/100, or 10/100/1000 network. 10/100 switched ethernet is recommended for PCM streaming Auto-detection of full and half-duplex modes. Automatic receive polarity correction. Maximum cable length: 100 meters (328 feet) True 100Mbps throughput; Shielded CAT5 RJ-45 connector; Connects to any 100Mbps or 10Mbps network; Auto-detects full duplex and half duplex modes; Automatic receive polarity correction; Maximum cable length: 100 meters (328 feet) Same as Squeezebox2 Same as Squeezebox2 Same as Squeezebox2 + Auto Uplink (Auto MDIX) None Same as Squeezebox2 + Auto Uplink (Auto MDIX) Same as Squeezebox2 + Auto Uplink (Auto MDIX) Same as Squeezebox2 + Auto Uplink (Auto MDIX) Wireless none 802.11b, external antenna; supports Shared-key WEP only (no WPA) 802.11g; supports WPA Personal, WPA2-AES and 64/128-bit WEP encryption; high speed PCI interface to radio module; bridging capability allows Ethernet devices to connect to the network through Squeezebox Wireless; internal and external antennas Same as Squeezebox2, except dual internal antennas rather than internal and external Same as Squeezebox2, except large dual external antennas Same as Squeezebox v3 802.11g with internal antenna Same as Squeezebox v3 Same as Squeezebox v3 Same as Squeezebox v3 Decoder Micronas MAS3507D Micronas MAS3539 Software-based MP3, FLAC, Ogg Vorbis, WMA (except WMA Lossless), AIFF, WAV Same as Squeezebox2 Same as Squeezebox2 but with faster CPU Same as Squeezebox2 Software-based decoders Same as Squeezebox2 Software-based decoders Software-based decoders DAC Crystal CS4334, 16-bit 44Khz Micronas MAS3539, 44.1 &amp; 48k Burr-Brown PCM1748E, 44.1 &amp; 48k Same as Squeezebox2 AKM4396, 44.1k, 48k &amp; 96k Wolfson\u00ae 24-bit WM8501,44.1kHz &amp; 48kHz Wolfson\u00ae WM8750 Texas Instruments TAS3204 Texas Instruments TLV320AIC3104 AKM4420, 44.1k, 48k &amp; 96k Buffer RAM 1Mb (8 seconds at 128Kbps) 1.8Mb (approx. 14 seconds at 128Kbps) 25Mb (approx. 200 seconds at 128Kbps) compresessed, plus 28Mb (10 seconds at 44.1 samples/sec) uncompressed Same as Squeezebox2 Same as Squeezebox2 Same as Squeezebox2 64MB Mobile SDRAM Same as Squeezebox2 64MB 16-bit bus DDR2 128MB 32-bit bus DDR2 ROM Rewritable flash program memory, EEPROM configuration memory Same Same Same Same Same 64MB NAND flash Same as Squeezebox2 128MB NAND flash 128MB NAND flash IR Standard 40Khz IR receiver Same Same, plus [Same as Squeezebox2 Same as Squeezebox2, dedicated IR in/out jacks None Built-in IR LED Standard 40Khz IR receiver Standard 40Khz IR receiver Same as Squeezebox2](IRBlasterIR-blasting]] through [GeekHole]%28GeekHole.md%29.md) IR Remote originally shipped with Sony RM-V201 universal remote user-programmed to JVC DVD command set; later shipped with 30 button IR Remote ? ? 30 button IR Remote Included 31 button IR Remote Included None (Advanced WiFi Controller included with Duet) Advanced WiFi Controller Basic 10 button IR Remote Included Optional 10 button IR Remote IR Remote Included IO Ports <ul><li>L+R RCA line-level analog output</li><li>10 Base-T Ethernet port?</li></ul> ? ? ? ? ? <ul><li>10/100Base-T Ethernet port</li><li>Line-in via 3.5 mm stereo jack</li><li>Headphone/Subwoofer out via 3.5 mm connector</li></ul> <ul><li>10/100Base-T Ethernet port</li><li>Line-in via 3.5 mm stereo jack</li><li>3.5 mm stereo headphone jack (side mounted)</li></ul> ? Wake on LAN (WOL) No No Player can wake SlimServer Same as Squeezebox2 Same as Squeezebox2 N/A Yes Yes Yes Yes Power supply 5V DC, 1600mA power supply, player uses 700ma (max) 5V DC, regulated Center positive, sleeve ground Connector: 2.5mm ID, 5.5mm OD, 11mm long Min supply rating: 1000mA. Switching power supply included. Input voltage range and plug style specific to shipping destination. Same as Squeezebox Same as Squeezebox2 Built-in super-linear power supplies, auto ranging 100-240VAC 9V DC, regulated, center positive, sleeve ground. Connector: 1.05mm ID, 3.5mm OD, 7mm long. Min supply rating: 550mA 1250mA Li-Ion battery, 2A switching power supply, wired charging station 12V DC, 2500mA power supply 18V DC, 1A, optional battery pack available 5V DC, 3A Protocols DHCP, ARP, IP, ICMP, UDP, Support for subnets/gateways (see documentation section on WANs), UDP-based SlimProto Same, plus TCP-based SlimProto and audio streaming Same, plus direct HTTP audio streaming and direct connection to SqueezeNetwork. Will automatically reconnect to SlimServer/SqueezeCenter. Same as Squeezebox2 Same as Squeezebox2 Same as Squeezebox2 TCP, UDP, ARP, ICMP, HTTP, DNS, DHCP, Comet Same as Squeezebox2 TCP, UDP, ARP, ICMP, HTTP, DNS, DHCP, Comet TCP, UDP, ARP, ICMP, HTTP, DNS, DHCP, Comet Latest Firmware 2.3 40 137 137 87 77 SqueezeOS 7.7.0 (Build r9546) 57 SqueezeOS 7.7.0 (Build r9546) SqueezeOS 7.7.0 (Build r9550) Compatible Server Software Version All 5.0+ (text version), 5.3.0+ (graphic display version) 6.0+ 6.0+ 6.5.0+ 7.0+ 7.0+ 7.2+ 7.4+ 7.5+"},{"location":"players-and-controllers/squeezebox-touch/","title":"Squeezebox Touch","text":"<p>The Squeezebox Touch, released in April 2010, is the most recent product in the Squeezebox product line. It can be controlled via an IR remote, the touch screen, or by any other controller interface, like the Logitech Media Server Web UI or the Squeezebox Controller.</p> <p>It also has the capacity to run as a server, which means that you can connect an USB hard drive with music to the Squeezebox Touch, and do without a dedicated computer or NAS to run Squeezebox Server.</p> <p>The Squeezebox Touch has a 24-bit, 96 kHz capable DAC. </p>"},{"location":"players-and-controllers/squeezebox-touch/#see-also","title":"See also","text":"<ul> <li>Setting Up Squeezebox Touch Server</li> <li>Troubleshooting Squeezebox Touch Server</li> <li>Setting up Enhanced Digital Output</li> </ul>"},{"location":"plugins/","title":"Plugins","text":""},{"location":"plugins/#todo","title":"#TODO","text":""},{"location":"reference/","title":"Reference","text":""},{"location":"reference/slimproto/","title":"SlimProto Protocol","text":"<p>note always check the perl source code, this documentation is not in sync with actual byte length in multiple places</p> <p>The SlimProto protocol is the new protocol developed for the squeezebox and replaces the SLIMP3 one. It is designed to allow the players to communicate effectively over WANs as well as LANs.</p> <p>This document describes the SlimProto for Squeezebox firmware versions 20 and above. The current version of the firmware shipped with SqueezeCenter 7.2.1 is 113. This document describes both version imperfectly.</p> <p>The server listens on TCP port 3483 for connections by players. To register a player with the server, they exchange \"helo\"s and then any of the commands below are valid.</p> <p>The client also listens on UDP port 3483 for SlimProto commands from the server it has already established a TCP connection with. It also seems to respond to data sent back in the TCP connection (you send frames back this way).</p> <p>The byte order is critical for several of the fields. The best way to check this out is to look at the server source code.</p>"},{"location":"reference/slimproto/#client-server-communications","title":"Client -&gt; Server Communications","text":"<p>For an authoritative answer on the format of the packets see the file Slim/Networking/Slimproto.pm. Different versions of the firmware send different formatted packets.</p> <p>A command to the server consists of three parts:</p> <ol> <li> <p>The 1st 4 bytes specify the operation. The following operations are supported:</p> <ul> <li>HELO</li> <li>BYE!</li> <li>STAT  heartbeat and play-event notification</li> <li>RESP  HTTP headers (from data stream)</li> <li>BODY  HTTP body (from data stream)</li> <li>META  metadata from stream</li> <li>DSCO  data stream disconnected</li> <li>DBUG  reports firmware revision</li> <li>IR    (note the two spaces after IR)</li> <li>RAWI  raw infra-red</li> <li>ANIC  animation complete</li> <li>BUTN  hardware button (transporter)</li> <li>KNOB  hardware knob (transporter)</li> <li>SETD  update preferences</li> <li>UREQ  firmware update request</li> </ul> </li> <li> <p>The 2nd part (of four bytes) is simply the length of the data packet (in network order).</p> </li> <li> <p>The 3rd part is the data itself.</p> </li> </ol> <p>Most of the operations above are detailed below:</p>"},{"location":"reference/slimproto/#helo","title":"HELO","text":"<p>This alerts the server to a clients presence and is the first thing normally transmitted by a client powering up.</p> <p>Data Length: 10, 20, or 36 bytes, depending upon deviceID and firmware revision.</p> <p>Format:</p> <p>!Field !Length !Notes |- |DeviceID |1 byte |The Device ID of the player. '2' is squeezebox. '3' is softsqueeze, '4' is squeezebox2,. '5' is transporter, '6' is softsqueeze3, '7' is receiver, '8' is squeezeslave, '9' is controller, '10' is boom, '11' is softboom, '12' is squeezeplay |- |Revision |1 byte |A number specifying the firmware revision |- |MAC 0-5 |6 bytes |The player's MAC address |- |UUID 0-15 | 16 bytes |Unique identifier of device (only in newer firmware)(not sent by softsqueeze) |- |WLanChannelList |2 bytes |A list of 802.11 channels that are enabled on a given device as a bitfield 0x07ff means that channels 0 through 11 are enabled which means it's configured for the US. |- |Bytes received |8 bytes |Number of data-stream bytes received (not sent by softsqueeze) |- |Language |2 bytes |Country code (not sent by softsqueeze) |}</p>"},{"location":"reference/slimproto/#capabilities","title":"Capabilities","text":"<p>This is an extension implemented in SBS 7.4 or later.</p> <p>The basic HELO packet above can be augmented by a list of capabilities, in which case the packet will be longer than 36 bytes. Capabilities form a comma-separated list. By convention CODEC capabilities are three or four letters all lower case and other capabilities start with an upper-case letter.</p> <p>Unrecognized capabilities will probably be ignored.</p> <p>CODECs should be stated in order of preference. The following are recognized at the time of writing:</p> <ul> <li>wma</li> <li>wmap - WMAPro</li> <li>wmal - WMA Lossless</li> <li>ogg</li> <li>flc</li> <li>pcm</li> <li>aif</li> <li>mp3</li> <li>alc - Apple Lossless</li> <li>aac - AAC &amp; HE-AAC, with or without MP4 wrapper</li> </ul> <p>The following could be anticipated: </p> <ul> <li>rtsp</li> <li>aud</li> </ul> <p>The following other capabilities are supported (case sensitive):</p> <ul> <li>MaxSampleRate=96000 - frames/s, should be multiples of 11025 or 12000</li> <li>Model=controller</li> <li>ModelName=Controller</li> <li>Rhap - supports Rhapsody</li> <li>AccuratePlayPoints - indicates that playpoints are precise and can be used in synchronization calculations without further filtering.</li> <li>SyncgroupID=nnnnnnnnnn - the sync-group which the player wants to join; used when a group of players is moved from one server to another.</li> <li>HasDigitalOut - somewhat of a misnomer. Currently, its only use is to enable the setting (via the SqueezeboxServer WebUI or CLI) of a preference to tie output volume at 100%.</li> <li>HasPreAmp - does the player have a separate analogue volume control.</li> <li>HasDisableDac - can the player's DAC be disabled.</li> </ul>"},{"location":"reference/slimproto/#ir-note-padded-with-two-spaces-to-make-it-up-to-4-characters","title":"\"IR \" (Note: padded with two spaces to make it up to 4 characters.)","text":"<p>One of these packets is received for each IR code received by the player.</p> <p>Data Length: Fixed at 10 bytes.</p> <p>Format:</p> <pre>\nTime   4 bytes Time since player startup in ticks (@1kHz)\n Format 1 byte  Code Format (ignored by the server for now.\n                Code represents type of IR code - NEC, JVC or Sony)\n NoBits 1 byte  Length of IR Code.  \n                (ignored by the server for now\n                16 bits for JVC, 32 bits for NEC?)\n IRCode 4 bytes the IR Code itself (upto 32 bits)</pre>"},{"location":"reference/slimproto/#resp","title":"RESP","text":""},{"location":"reference/slimproto/#body","title":"BODY","text":"<p>HTTP (or MMS) response headers or message body from the data stream. These can be parsed for metadata (title, format, bitrate, etc.), or (in the case of a body) for a playlist.</p>"},{"location":"reference/slimproto/#meta","title":"META","text":"<p>Embedded metadata from the data stream from which useful information may be extracted,</p>"},{"location":"reference/slimproto/#stat","title":"STAT","text":"<p>These are sent by the player in response to commands and periodically when there are no commands as a sort of keep-alive. They inform the server of the status of various player internals.</p> <p>Format:</p> <p>!Size !Notes |- |u32 |Event Code (a 4 byte string) |- |u8 |Number of consecutive CRLF recieved while parsing headers |- |u8 |MAS Initalized - 'm' or 'p' |- |u8 |MAS Mode - serdes mode? |- |u32 |buffer size - in bytes, of the player's (network/stream) buffer |- |u32 |fullness - data bytes in the player's (network/stream) buffer |- |u64 |Bytes Recieved |- |u16 |Wireless Signal Strength (0-100 - Larger values mean hardwired) |- |u32 |jiffies - a timestamp from the player (@1kHz) |- |u32 |output buffer size - the decoded audio data buffer size |- |u32 |output buffer fullness - bytes in the decoded audio data buffer |- |u32 |elapsed seconds - of the current stream |- |u16 |voltage |- |u32 |elapsed milliseconds - of the current stream |- |u32 |server timestamp - reflected from an strm-t command |- |u16 |error code - used with STMn |}</p> <p>The Bytes Received field is how many data bytes the player has recieved (since it started playing?).</p> <p>Output buffer size/fullness, elapsed time, voltage, elapsed milliseconds, server timestamp &amp; error code, along with the STMo were added with more-recent firmware revisions.</p> <p>Earlier firmware revisions report the read and write pointers for the player's decoder input buffer, rather than the buffer size and fullness. The bytes received and the read/write pointers are used in this case to update the elapsed time count.</p> <p>Event code may be one of the following:</p> <p>valign=\"top\" EventCode| Description| Notes valign=\"top\" vfdc| vfd received| Not observed, presumably an ack to a VFD (display) message valign=\"top\" i2cc| i2c confirmation|</p> <p>valign=\"top\" STMa| Autostart| Track started. Probably Squeezebox v1 only. valign=\"top\" STMc| Connect| srtm-s command received. Guaranteed to be the first response to an strm-s. valign=\"top\" STMd| Decoder ready| Instruct server that we are ready for the next track (if any). Sometimes (unfortunately) this will also indicate an error. valign=\"top\" STMe| Stream connection Established|</p> <p>valign=\"top\" STMf| Connection flushed| Streaming track flushed (in response to strm-f) or playback stopped (in response to strm-q). The number of STMf responses which  may be received in various circumstances is not well defined. valign=\"top\" STMh| HTTP headers received| from the streaming connection. valign=\"top\" STMl| Buffer threshold reached| When strm-s autostart=0/2. valign=\"top\" STMn| Not Supported| Decoder does not support file format or a decoding error has occurred. May include format-specific error code. valign=\"top\" STMo| Output Underrun| No more decoded (uncompressed) data to play; triggers rebuffering. valign=\"top\" STMp| Pause| Confirmation of Pause. valign=\"top\" STMr| Resume| Confirmation of resume. (Not used during playout) valign=\"top\" STMs| Track Started| Playback of a new track has started. valign=\"top\" STMt| Timer| A simple hearbeat, can be periodic or a response to strm-t| valign=\"top\" STMu| Underrun| Normal end of playback.|</p> <p>The event code is a method of triggering events in the server. For example, STMd which occurs on decoder buffer underrun causes the server to switch to the next track.</p> <p>The error codes are internal and codec-specific. Not all decoders make use of error codes. The current ones are:</p> <p>|Code |Name |- |0 |N/A |- |100 |OGG_ERROR_TOO_MANY_CHANNELS |- |101 |OGG_ERROR_HIGH_MEMORY |- |102 |OGG_ERROR_INVALID_SAMPLE_RATE |- |103 |OGG_ERROR_NOTVORBIS |- |104 |OGG_ERROR_BADHEADER |- |200 |WMA_ERROR_SPEECH_SUPERFRAMES |- |201 |WMA_ERROR_LOSSLESS |}</p>"},{"location":"reference/slimproto/#anic","title":"ANIC","text":"<p>The display animation is complete. This seems to be undocumented. in the squeezecenter code Slim\\Display\\Display.pm there a brief description of the client capabilities.</p>"},{"location":"reference/slimproto/#bye","title":"BYE!","text":"<p>The player is disconnecting.</p> <p>If the first data byte to this command is 0x01 then the player is going out for an upgrade...</p>"},{"location":"reference/slimproto/#server-client-communication","title":"Server -&gt; Client Communication","text":"<p>Data from the server to the player consists of 2 bytes of length data (in network order), a 4 byte command header, then the command data itself. The length sent is the size of the data plus the 4 byte command header; it does not include the 2 byte length field itself.</p>"},{"location":"reference/slimproto/#command-strm","title":"Command: \"strm\"","text":"<p>This takes 24 bytes data of the form:</p> <p>!Field !Length !Notes |- |$command |1 byte |'s' start, 'p' pause, 'u' unpause, 'q' stop, 't' status, 'f' flush, 'a' skip-ahead |- |$autostart |1 byte |'0' = don't auto-start, '1' = auto-start, '2' = direct streaming, '3' = direct+auto |- |$formatbyte |1 byte |'p' = PCM, 'm' = MP3, 'f' = FLAC, 'w' = WMA, 'o' = Ogg., 'a' = AAC (&amp; HE-AAC), 'l' = ALAC |- |$pcmsamplesize |1 byte |'0' = 8, '1' = 16, '2' = 20, '3' = 32; usually '1', '?' for self-describing formats. |- |$pcmsamplerate |1 byte |'0'=11kHz, '1'=22kHz, '2'=32kHz, '3'=44.1kHz, '4'=48kHz, '5'=8kHz, '6'=12kHz, '7'=16kHz, '8'=24kHz, '9'=96kHz; usually 3, '?' for self-describing formats. |- |$pcmchannels |1 byte |'1'=mono, '2'=stereo; usually '2', '?' for self-describing formats. |- |$pcmendian |1 byte |'0' = big, '1' = little; '1' for WAV, '0' for AIFF, '?' for self-describing formats. |- |$threshold |1 byte |KB of input buffer data before autostart or notify |- |$spdif_enable |1 byte |'0'=auto, '1'=on, '2'=off; usually 0 |- |$trans_period |1 byte |transition duration in seconds |- |$trans_type |1 byte |'0' = none, '1' = crossfade,'2' = fade in, '3' = fade out, '4' = fade in &amp; fade out |- |$flags |1 byte |0x80 - loop infinitely, 0x40 - stream without restarting decoder, 0x01 - polarity inversion left, 0x02 - polarity inversion right |- |$output_threshold. |1 byte |amount of output buffer data before playback starts, in tenths of second |- |RESERVED |1 byte |reserved |- |$replay_gain |4 bytes |replay gain in 16.16 fixed point, 0 = none (for the 's' command - see below for further discussion). |- |$server_port |2 bytes |Server Port to use (9000 is the default) |- |$server_ip |4 bytes |0 means use IP of control server |}</p> <p>This is followed by an HTTP header itself. This is used to obtain the stream data eg:</p> <pre>\nGET /stream.mp3?player=$client-id HTTP/1.0\n (Authorization: Basic $password)\n (blank line)</pre> <p>The Auth line is only sent if authorization is in use. $client-id is the usually the MAC address of the player and $password is a password generated by the server.</p> <p>Other headers to be included in the HTTP request may also be supplied.</p>"},{"location":"reference/slimproto/#u-p-a-t-commands-and-replay_gain-field","title":"u, p, a &amp; t commands and replay_gain field","text":"<p>The u, p, a &amp; t commands all make special use of the replay_gain field, as follows:</p> <p>u - if non-zero, the player-specific internal timestamp (ms) at which to unpause (this is used by the server to coordinate the start of multiple synchronized players).</p> <p>p - if non-zero, an interval (ms) to pause for and then automatically resume - no STMp &amp; STMr status messages are sent in this case.</p> <p>a - if non-zero, an interval (ms) to skip over (not play).</p> <p>t - a timestamp field from the server to be returned in the corresponding STMt status message (used to measure round-trip latency).</p>"},{"location":"reference/slimproto/#flac-specific-notes","title":"FLAC-specific notes","text":"<p>For FLAC, some of the fields are reused, as follows:</p> <p>pcmsamplesize - container type: '?' (flac), 'o' (ogg/flac)</p>"},{"location":"reference/slimproto/#wma-specific-notes","title":"WMA-specific notes","text":"<p>For WMA, some of the fields are reused, as follows:</p> <p>pcmsamplesize - response will include HTTP/MMS chunking;</p> <p>pcmsamplerate - the audio stream number to play;</p> <p>pcmchannels - the metadata stream number, if any.</p>"},{"location":"reference/slimproto/#aac-specific-notes","title":"AAC-specific notes","text":"<p>For AAC, some of the fields are reused, as follows:</p> <p>pcmsamplesize - container type and bitstream format: '1' (adif), '2' (adts), '3' (latm within loas), '4' (rawpkts), '5' (mp4ff), '6' (latm within rawpkts);</p>"},{"location":"reference/slimproto/#command-aude","title":"Command: \"aude\"","text":"<p>Tell the client to enable/disable the audio outputs.</p> <p>2 bytes</p> <pre>\n$spdif_enable   1 byte  0x0 = disable SPDIF, 0x1 = enable SPDIF\n $dac_enable     1 byte  0x0 = disable DAC, 0x1 = enable DAC output</pre>"},{"location":"reference/slimproto/#command-audg","title":"Command: \"audg\"","text":"<p>Tell the client to adjust the audio gain (volume level)</p> <p>10 bytes (all ints are network byte order)</p> <pre>\n$old_left      4 bytes unsigned int\n $old_right     4 bytes unsigned int\n $dvc           1 byte  Digital volume control 0/1\n $preamp        1 byte  Preamp (byte 255-0)\n $new_left      4 bytes 16.16 fixed point\n $new_right     4 bytes 16.16 fixed point\n $sequence      4 bytes unsigned int, optional</pre> <p>total: 18-22 bytes (+ 4 bytes command header \"audg\") </p> <pre>\nold_left/old_right should range from 0..128 new_left/new_right are 16.16 fixed point</pre> <pre>\nFirmware v22+ on the SB2 use the new style; older use the old-style.</pre>"},{"location":"reference/slimproto/#command-grfb","title":"Command: \"grfb\"","text":"<p>Tells the client to adjust the brightness of the display.</p> <p>Send a short int (2 bytes, network byte order) with a brightness level from 0-4 (on Squeezebox2). On newer firmwares (squeezecenter 7.3), it seems to range from -1 up to and including 5. -1 means totally off, 5 is the brightest.</p>"},{"location":"reference/slimproto/#command-grfe","title":"Command: \"grfe\"","text":"<p>Sends a bitmap to the client for display. It starts with a header of 4 bytes, followed by 1280 bytes of data. The header is:  $offset        2 bytes short int  $transition    1 byte ('L','R','U' or 'D')  $param         1 byte</p> <p>On Squeezebox3, the data is 1280 bytes; each one is a bitfield (0=off 1=on for that bit). Bits are layed out from top to bottom in column 1 of the display, then top to bottom in column 2, etc. The Squeezebox3 has a 320x32 display, so each column is 4 bytes.</p> <p>if $transition is a capital, the frame is bounced a few pixels, a lowercase value results in a full scroll. the parameter determines how many pixels are part of the animation (from bottom to top). More information on the transition can be found in pushBumpAnimate() of slim\\display\\Squeezebox2.pm in the squeezecenter source code.</p> <p>For instance, the 4-byte sequence (in binary):</p> <pre>\n1000 0000 \n 0000 0000 \n 0000 0000 \n 0000 0011</pre> <p>would light up the top pixel and the two bottom pixels on the row; send a grfe with that sequence 320 times and you get a thin line across the top of the display and a thicker line across the bottom.</p> <p>It is also possible to send compressed graphics. the highest byte of 'g' in the 'grfe' command should be set. The frame is then assumed to be compressed using LZF. The length in the header is the length of the compressed data (+4 for the command code).</p>"},{"location":"reference/slimproto/#command-i2cc","title":"Command: \"i2cc\"","text":"<p>Squeezebox1 only, sends an i2c command to the client.</p> <p>The data is the i2c command to send in the same format as for the SLIMP3 protocol.</p> <p>This is used to control the setup of the mas chip. Volume commands are embedded in this.</p>"},{"location":"reference/slimproto/#command-serv","title":"Command: \"serv\"","text":"<p>Tells the client to switch to another server.</p> <pre>\n$ip_address   4 bytes in network order; 0x1 means switch to squeezenetwork\n $syncgroupid  (optional) 10 ASCII digits;\n               this should be reflected in the HELO command\n               (**SyncgroupID** capability) when the player connects\n               to the new server so that it may re-join its sync-group.</pre>"},{"location":"reference/slimproto/#command-stat","title":"Command \"stat\"","text":"<p>Request a STAT update from the player</p>"},{"location":"reference/slimproto/#command-vfdc","title":"Command: \"vfdc\"","text":"<p>Sends VFD data to the client.</p> <p>The data is the vfd data to send in the same format as for the SLIMP3 protocol.</p>"},{"location":"reference/slimproto/#command-vers","title":"Command: \"vers\"","text":"<p>Sends server version string to the client.</p> <p>The data is the human readable version information for the server (a simple string)</p>"},{"location":"reference/slimproto/#command-visu","title":"Command \"visu\"","text":"<p>Tells the server to activate/deactivate visualizer for the music.</p> <pre>\n$which      1 byte    Which visualizer to use\n $count      1 byte    How many parameters there are\n $param_1    4 bytes   first parameter...\n $param_N    4 bytes   last parameter</pre> <p>Values for $which:</p> <pre>\n0    Blank\n 1    Vumeter   \n 2    Spectrum\n 3    Waveform</pre> <pre>\n$channels    0=stereo 1=mono   \n $style       0=digital 1=analog   \n $position    left/right position in pixels (0=left side)   \n $width       width in pixels   \n $r_position  left/right position of the right channel (stereo only)   \n $r_width     width in pixels of the right channel (stereo only)2    Spectrum analyzer   \n $channels   as for vumeter   \n $bandwidth   0=0..22050Hz, 1=0..11025Hz   \n $Preemphasis in dB per KHz   \n $position    left/right position in pixels (0=left side)   \n $width       width in pixels   $orientation 0=left to right  1=right to left   \n $bar_width   Bar width in pixels   $bar_space   Bar spacing in pixels   \n $clipping    0 = show all subbands  1= clip higher bands   \n $intensity   Bar intensity (greyscale) 1-3   \n $cap         Bar cap intensity (greyscale) 1-3For stereo, repeat the channel-specific   \n $r_position  Right side position   ...   \n $r_cap       Right side bar cap intensity</pre>"},{"location":"reference/slimproto/#undocumented-commands-brief-rundown","title":"Undocumented commands, brief rundown","text":""},{"location":"reference/slimproto/#command-audc","title":"Command \"audc\"","text":"<p>Transporter only, update clock source</p>"},{"location":"reference/slimproto/#command-audp","title":"Command \"audp\"","text":"<p>Transporter only, update audio source</p>"},{"location":"reference/slimproto/#command-body","title":"Command \"body\"","text":"<p>Request part of the body of a file from the player (to get remotely downloaded playlists, find bit rates of mp3, etc)</p>"},{"location":"reference/slimproto/#command-cont","title":"Command \"cont\"","text":"<p>Content-type related, related to playing remote songs</p>"},{"location":"reference/slimproto/#command-grfd","title":"Command \"grfd\"","text":"<p>SqueezeboxG only, draw graphics</p>"},{"location":"reference/slimproto/#command-irtm","title":"Command \"irtm\"","text":"<p>Send timing info to client about when IR messages are processed</p>"},{"location":"reference/slimproto/#command-knoa","title":"Command \"knoa\"","text":"<p>Knob on a remote control?</p>"},{"location":"reference/slimproto/#command-knob","title":"Command \"knob\"","text":"<p>Transporter only, knob-related</p>"},{"location":"reference/slimproto/#command-rhap","title":"Command \"rhap\"","text":"<p>Rhapsody-specific</p>"},{"location":"reference/slimproto/#command-rsps","title":"Command \"rsps\"","text":"<p>Transporter only, adjust RS232 baud rate</p>"},{"location":"reference/slimproto/#command-rstx","title":"Command \"rstx\"","text":"<p>Transporter only, send RS232 TX</p>"},{"location":"reference/slimproto/#command-setd","title":"Command \"setd\"","text":"<p>Get/set player firmware settings</p>"},{"location":"reference/slimproto/#command-upda","title":"Command \"upda\"","text":""},{"location":"reference/slimproto/#command-updn","title":"Command \"updn\"","text":""},{"location":"reference/slimproto/#command-ureq","title":"Command \"ureq\"","text":"<p>The last 3 are firmware update related commands</p>"}]}